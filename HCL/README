The project is about the quantum hierarchical clustering (qHCl) algorithm. The algorithm classically calculates the distance matrix between the points (vectors) we wish to cluster. Then it uses a recursive quantum minimization subroutine to find the minimum distance in the matrix, clustering the two points. 
The minimization is probabilistic, using the Durr Hoyer algorithm, which itself extends Grover’s algorithm. 
We also run an analogous fully classical HCl algorithm, where the only difference is the minimization is classical and exact rather than quantum and probabilistic. The results of the two algorithms are compared.
The dendrogram data is exported from Python, to be imported into R and create the heat map with dendrogram. 

Main run in Python: from hclustpca import *; hier_cluster2()

Workflow: start with running hclustpca.py as above
Then execute build_heatmap_rows.R (strategy 1 only) which builds the needed heatmaps under the figs folder (we then move it to a subfolder of figs according to the type generated).

FILES and FOLDERS:
hclustpca.py - main Python file, runs classical and quantum HCl 

build_heatmap_rows.R: Imports data generated by Python and creates heat map with dendrogram

temp: folder containing temporary feather files exported by Python scripts to be imported into R and create custom hclust objects to put in dendrogram
figs: all generated figures, with different datasets and formats. Latest as of Nov 2018 is in subfolder rows_heatmaps
Reports: full run results of early runs of qHCl and classical HCl

figs/: stores generated figures, which we then manually move to a subfolder under figs/ as per the category. Latest as of Nov 2018 is rows_heatmaps. 
Rows = cluster on samples (rows of matrix X) … although when plotted in the heatmap, we plot the transpose of X so the samples are along the columns
figures of interest end in quantumHCl.pdf or customWardHCl.pdf, which are the quantum and classical ones generated from hclust*.py
